<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<head>
<script language="JavaScript1.8" type="text/javascript"> <!--
    pageModDate = "31 March 2013 16:17 PDT";
    // by P.B. Stark, statistics.berkeley.edu/~stark
    // Copyright 2000-2013. All rights reserved.
// -->
</script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/ui/1.9.2/jquery-ui.js"></script>
<link href="http://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="http://d3js.org/d3.v2.js"></script>
<script type="text/javascript" src="../../Java/sticigui.js"></script>
<link href="../../Java/CSS/sticigui.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="../../Java/irGrade.js" language="JavaScript1.8"></script>

</head>

<body >
<script language="JavaScript1.8" type="text/javascript"><!--
    var CA = true;
// -->
</script>


<ul>
<li>
    Write your name, student ID number, and the exam version on your Scantron form.
</li>
<li>
    Scantron forms without a student ID number or without an exam version number will not be
    graded&mdash;you will receive an F on the midterm if you omit either.
</li>
<li>
    Write your name and SID on this exam.
</li>
<li>
    Return this exam with your Scantron form.
</li>
<li>
    Sign the top of the scantron form to confirm &quot;I swear I did not cheat on this exam, nor did I help
    anyone else to cheat.&quot;
</li>
</ul>


<!-- ==================================START PROBLEM==================================== -->

<div class="problem">
<script language="JavaScript1.8" type="text/javascript"><!--
    document.writeln(startProblem(pCtr++));
    var  qStr = '<span class="qSpan">Which informal fallacy&mdash;if any&mdash;does the following ' +
                'argument commit?</span></p><p><span class="example">';
    var vstatements = [
                        'Nobody has proved that UFOs exist: Reported sightings that have been investigated have ' +
                           'less exotic explanations. Therefore, UFOs do not exist.',
                        'A particular wireless service provider\'s costs have risen by about $10 per ' +
                           'month for each additional customer.  Therefore, if a customer cancels service, the ' +
                           'wireless service provider will save about $10 per month.',
                        'Smoking is responsible for millions of avoidable deaths per year.  Therefore, ' +
                           'if a tobacco company is sued for any reason, the company should lose.',
                        'The United States has one of the highest infant mortality rates among developed ' +
                           'countries, while developed countries with socialized medicine have some of ' +
                           'the lowest infant mortality rates.  Therefore, if the U.S. switches to single-payer ' +
                           'healthcare, infant mortality in the U.S. will decrease.'
                      ];
     var rawOpt = ['appeal to ignorance',
                   'questionable cause',
                   'false dichotomy',
                   'two wrongs make a right'
                  ];
     var which = listOfRandInts(1, 0, vstatements.length-1)[0];
     qStr += vstatements[which] + '</span></p><p>';
     document.writeln(qStr);
     var optPerm = randPermutation(rawOpt,"inverse");
     var opt = optPerm[0];
     opt[opt.length] = "none of the above";
     var aVal;
     switch (which) {
         case 0:
           aVal = alphabet[optPerm[1][0]];
           break;
         case 1:
           aVal = alphabet[optPerm[1][1]];
           break;
         case 2:
           aVal = alphabet[optPerm[1][3]];
           break;
         case 3:
           aVal = alphabet[optPerm[1][1]];
           break;
     }
     writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</div>


<!-- ==================================START PROBLEM==================================== -->
<div class="problem">
<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    var qStr = '<span class="qSpan">Are the following arguments valid or fallacious?</span></p>';
    document.writeln(qStr);
    var vstatements = [
                        ['Q. Therefore, not (not Q).',
                           'This is the definition of &quot;not.&quot;'],
                       ['Q. S. Therefore, Q and S.',
                           'This is the definition of &quot;and.&quot;'],
                       ['S. Therefore, Q or S.',
                           '<span class="math">Q or S</span> is true if <span class="math">Q</span> is true, ' +
                           'if <span class="math">S</span> is true and if both <span class="math">Q</span> ' +
                           ' and <span class="math">S</span> are true.'],
                       ['Q or S. Not S. Therefore, Q.',
                           'If either <span class="math">Q</span> or <span class="math">S</span> is true, and ' +
                           '<span class="math">S</span> is not true, <span class="math">Q</span> must ' +
                           'be true.'],
                       ['If Q then S. Q. Therefore, S.',
                           'This is <a class="glossRef" href="gloss.htm#affirming_the_antecedent">affirming ' +
                           'the antecedent</a>.'],
                       ['If Q then S. Not S. Therefore, not Q.',,
                           'This is <a class="glossRef" href="gloss.htm#denying_the_consequent">denying ' +
                           'the consequent</a>.'],
                       ['Not (Q or S).  Therefore, (not Q) and (not S)',
                           'This is an application of one of ' +
                           '<a class="glossRef" href="gloss.htm#de_morgan">de Morgan\'s laws</a>.'],
                       ['Not (Q or S).  Therefore, (not Q) or (not S)',
                           'Sy one of ' +
                           '<a class="glossRef" href="gloss.htm#de_morgan">de Morgan\'s laws</a>, if ' +
                           '<span class="math">not (Q or S)</span>, ' +
                           'then <span class="math">Q</span> is false and <span class="math">S</span> ' +
                           'is false. But if both <span class="math">Q</span> and ' +
                           '<span class="math">S</span> are false, then either <span class="math">Q</span> ' +
                           'is false or <span class="math">S</span> is false.'],
                       ['Not (Q and S).  Therefore, (not Q) or (not S)',
                           'This is an application of one of ' +
                           '<a class="glossRef" href="gloss.htm#de_morgan">de Morgan\'s laws</a>.'],
                       ['Q or not S.  S. Therefore, Q.',
                           'This is the definition of &quot;or&quot; applied to <span class="math">Q</span> ' +
                           'and <span class="math">not S</span>.  If either <span class="math">Q</span> is ' +
                           'true or <span class="math">S</span> is false, and <span class="math">S</span> ' +
                           'is true, then <span class="math">Q</span> must be false.']
                      ];
    var fstatements = [
                       ['Q or S.  Q.  Therefore, not S.',
                           '<span class="math">Q or S</span> is true with either <span class="math">Q</span>, ' +
                           '<span class="math">S</span> or both are true.  So, both <span class="math">Q</span> ' +
                           'and <span class="math">S</span> could be true, and it does not follow that ' +
                           '<span class="math">S</span> is false.'],
                       ['Q or S.  S.  Therefore, not Q.',
                           '<span class="math">Q or S</span> is true with either <span class="math">Q</span>, ' +
                           '<span class="math">S</span> or both are true.  So, both <span class="math">Q</span> ' +
                           'and <span class="math">S</span> could be true, and it does not follow that ' +
                           '<span class="math">Q</span> is false.'],
                       ['Not (Q and S). Therefore, not S.',
                           '<span class="math">Q and S</span> is false when either <span class="math">Q</span>, ' +
                           '<span class="math">S</span>, or both are false.  So, <span class="math">S</span> ' +
                           'might be true and <span class="math">Q</span> might be false. It does not follow that ' +
                           '<span class="math">S</span> is false.'],
                       ['Not (Q and S). Therefore, not Q.',
                           '<span class="math">Q and S</span> is false when either <span class="math">Q</span>, ' +
                           '<span class="math">S</span>, or both are false.  So, <span class="math">Q</span> ' +
                           'might be true and <span class="math">S</span> might be false. It does not follow that ' +
                           '<span class="math">Q</span> is false.'],
                       ['If Q then S. Not Q. Therefore, not S.',
                           'This is an example of <a class="glossRef" href="gloss.htm#denying_the_antecedent">' +
                           'denying the antecedent</a>.'],
                       ['If Q then S. Not S. Therefore, Q.',
                           'By <a class="glossRef" href="gloss.htm#denying_the_consequent">denying the ' +
                           'consequent</a>, we can conclude that <span class="math">Q</span> is false, not that ' +
                           '<span class="math">Q</span> is true.'],
                       ['If Q then S. S. Therefore, Q.',
                           'This is an example of <a class="glossRef" href="gloss.htm#affirming_the_consequent">' +
                           'affirming the consequent</a>.'],
                       ['Not (Q and S). Therefore, (not Q) and (not S)',
                           'It follows that either <span class="math">Q</span> is false or ' +
                           '<span class="math">S</span> is false, but not necessarily that both are false.']
                      ];
    var opt = ['fallacious','valid'];
    var stmt;
// how many questions?
    var nQ = 4;
    var whichV = listOfDistinctRandInts(nQ,0,vstatements.length-1);
    var whichF = listOfDistinctRandInts(nQ,0,fstatements.length-1);
    for (var j = 0; j < nQ; j++) {
       document.writeln('<p>' + startProblem(pCtr++));
       var which = randBoolean();
       if (which) {
            stmt = vstatements[whichV[j]][0];
            aVal = alphabet[1];
       } else {
            stmt = fstatements[whichF[j]][0];
            aVal = alphabet[0];
       }
       qStr = '<span class="example">' + stmt + '</span></p><p>';
       document.writeln(qStr);
       writeRadioExercise(qCtr++, opt, aVal);
       document.writeln('</p>');
    }
// -->
</script>
</p>
</div>

<div class="problem">
<script language="JavaScript1.8" type="text/javascript"><!--
    document.writeln(startProblem(pCtr++));
    var qStr = 'Consider the prices of homes in San Francisco County, CA. ' +
               '<span class="qSpan"> Which of the following is largest?</span></p><p>';
    document.writeln(qStr);
    var rawOpt = ['the mean', 'the median', 'the mode'];
    var optPerm = randPermutation(rawOpt,'inverse');
    var opt = optPerm[0];
    opt[opt.length] = 'any of the above could be largest';
    var aVal = alphabet[optPerm[1][0]];
    writeRadioExercise(qCtr++, opt, aVal);
    document.writeln('</p>');
// -->
</script>
</div>

<!-- ==================================START PROBLEM==================================== -->
<div class="problem">
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.write(startProblem(pCtr++));
    var qStr = ' The SD of a list is zero. <span class="qSpan">' +
               'Select the strongest statement that must be true.</span></p><p>';
    document.writeln(qStr);
    var rawOpt = [ 'all the numbers in the list must be zero',
                   'at least half the numbers in the list must be zero' ,
                   'all the numbers in the list must be equal' ,
                   'the mean of the list must be zero'
                 ];
    var optPerm = randPermutation(rawOpt,'inverse');
    var opt = optPerm[0];
    opt[opt.length] = 'all of the above must be true';
    var aVal = alphabet[optPerm[1][2]];
    writeRadioExercise(qCtr++, opt, aVal);
    document.writeln('</p>');
// -->
</script>
</div>


<!-- ==================================START PROBLEM==================================== -->
<div class="problem">
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.write(startProblem(pCtr++));
    var qStr = 'The mean of a list is zero. <span class="qSpan">Select the strongest statement ' +
               'that must be true.</span></p><p>';
    document.writeln(qStr);
    var rawOpt = [ 'at least half the numbers in the list must be zero',
                'all the numbers in the list must be equal',
                'the median of the list must be zero',
                'the SD of the list must be zero'
              ];
    var optPerm = randPermutation(rawOpt,'inverse');
    var opt = optPerm[0];
    opt[opt.length] = 'none of the above need be true'
    var aVal = alphabet[4];
    writeRadioExercise(qCtr++, opt, aVal);
    document.writeln('</p>');
// -->
</script>
</div>


<!-- ==================================START PROBLEM==================================== -->
<div class="problem">
<p>
<script language="JavaScript1.8" type="text/javascript"><!--
    document.writeln(startProblem(pCtr++));
    var meanBux = 10;
    var sdBux = 1 + (listOfRandInts(1,1,5))[0];
    var fac = roundToDig(1 + 5 * rand.next(),1);
    var bux = roundToDig(meanBux + fac * sdBux,3);
    var limit = Math.min(1/(fac*fac),bux/meanBux);
    var opt = ['5%','25%','50%','75%','100%'];
    var aVal = alphabet[opt.length - 1];
    for (var j=opt.length-2; j >= 0; j--) {
        if (parsePercent(opt[j]) >= limit) {
            aVal = alphabet[j];
        }
    }
    var qStr = 'A group of students have various amounts of money in their pockets.  On average, they have ' +
               '$' + meanBux.toString() + ', with a standard deviation of $' + sdBux.toString() + '. ' +
               '<span class="qSpan">Among the following numbers, which is the smallest upper bound ' +
               'on the fraction of students who have $' + bux.toString() +
               ' or more in their pockets?</span></p><p>';
    document.writeln(qStr);
    writeRadioExercise(qCtr++, opt, aVal);
    document.writeln('</p>');
// -->
</script>
</div>


<!-- ==================================START PROBLEM==================================== -->
<div class="problem">
<p>
<script language="JavaScript1.8" type="text/javascript"><!--
   document.writeln(startProblem(pCtr++));
   var theWord = ['humdrum','pedestrian','everyday','vanilla','unexceptional'];
   var theInt = (listOfRandInts(1,0,theWord.length-1))[0];
   var num = 0;
   if (theInt == 0)        { // humdrum  7:    h, u(2), m(2), d, r
       num = 7*6*5*6;
   } else if (theInt == 1) { // pedestrian 10: p, e(2), d, s, t, r, i, a, n
       num = 10*9*8*7*6*5*4*3;
   } else if (theInt == 2) { // everyday 8:   e(2), v, r, y(2), d, a
       num = 8*7*6*5*6;
   } else if (theInt == 3) { // vanilla 7:    v, a(2), n, i, l(2)
       num =  7*6*5*6;
   } else if (theInt == 4) { // unexceptional 13: u, n(2), e(2), x, c, p, t, i, o, a, l
       num = 13*12*11*10*9*8*7*6*5*6;
   }
   var qStr = '<span class="qSpan">The number of distinguishable ways of arranging ' +
           'the letters in the word &quot;' + theWord[theInt]  + '&quot; is closest to</span></p><p>';
   var wlen = theWord[theInt].split('').length;
   var distlen = (unique(theWord[theInt].split(''))).length;
   var rawOpt = [ commify(num),
                  commify(factorial(wlen)),
                  commify(factorial(distlen)),
                  commify(binomialCoef(wlen, distlen)),
                  commify(Math.pow(distlen, wlen))
                ];
   var optPerm = randPermutation(rawOpt,"inverse");
   var opt = optPerm[0];
   var aVal = alphabet[optPerm[1][0]];
   document.writeln(qStr);
   writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>
</div>


<!-- ==================================START PROBLEM==================================== -->
<div class="problem">
<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var possRs = [-0.95, -0.5, 0, 0.5, 0.95];
    var rInx = listOfRandInts(1,0,4)[0];
    var r1 = possRs[rInx];
    var opt = new Array(possRs.length);
    for (var i=0; i < possRs.length; i++ ) {
       opt[i] = roundToDig(possRs[i],2).toString();
    }
    var aVal = alphabet[rInx];
    var nPoints = 50*listOfRandInts(1,1,4)[0];
    var qStr = 'The following scatterplot contains ' + nPoints.toString() + ' points.</p><p>' +
               '<span class="qSpan">The correlation coefficient of the two variables is ' +
               'closest to</span></p><p>';
    document.writeln(qStr);
    writeRadioExercise(qCtr++,opt,aVal);
    var qStr = '</p><p align="center"><applet code="Correlation.class" ' +
                'codebase="../../Java/" ' +
                'align="baseline" width="600" height="380" archive="PbsGui.zip" ' +
                'name="applet1"><param name="addPoints" value="false">' +
                '<param name="graphAveButton" value="false">' +
                '<param name="n" value="' + nPoints.toString() + '">' +
                '<param name="regressButtons" value="false">' +
                '<param name="sdLineButton" value="false">' +
                '<param name="sdButton" value="false">' +
                '<param name="showRBar" value="false">' +
                '<param name="title" value="Correlation: Problem ' +
                (pCtr-1).toString() + '">' +
                '<param name="r" value="' + r1.toString() + '">' +
                'You need Java to see this.' +
                '</applet>\n';
     document.writeln(qStr);
     var appNum = (document.applets.length - 1).toString();
     sectionContext += // 'document.applets[' + appNum + '].setN(' + nPoints.toString() + ');\n' +
                       'document.applets[' + appNum + '].setR(' + r1.toString() + ');\n';
// -->
</script>
</p>
</div>



<!-- ==================================START PROBLEM==================================== -->
<div class="problem">
<script language="JavaScript1.8" type="text/javascript" src="../../Java/p6-1990.js"></script>
<script language="JavaScript1.8" type="text/javascript" ><!--
// for census data questions
    var headInx = (listOfDistinctRandInts(2,0,headList.length-1)).sort(numberLessThan);
    var header = [headList[headInx[0]],headList[headInx[1]]];
    var nStat = 8;
    var indices = listOfDistinctRandInts(nStat,0,popData.length-1);
    var popXList = new Array(nStat);
    var sortPopXList = new Array(nStat);
    var popYList = new Array(nStat);
    var sortPopYList = new Array(nStat);
    for (i = 0; i < nStat; i++) {
        popXList[i] = roundToDig(popData[indices[i]][headInx[0]],3);
        sortPopXList[i] = popXList[i];
        popYList[i] = roundToDig(popData[indices[i]][headInx[1]],3);
        sortPopYList[i] = popYList[i];
    }
    sortPopXList.sort(numberLessThan);
    sortPopYList.sort(numberLessThan);
    var pctilePerm = distinctRandPermutation(nStat); // [2,3,0,8,7,1,5,9,4,6]; permutation of the sorted data list
    for (var i=0; i < sortPopXList.length; i++ ) {
        popXList[i] = sortPopXList[pctilePerm[i]];
        popYList[i] = sortPopYList[pctilePerm[i]];
    }
    var allXData = new Array(51); // array to hold all the X data
    var allYData = new Array(51); // array to hold all the Y data
    for (var i=0; i < 51; i++) {
        allXData[i] = popData[i][headInx[0]];
        allYData[i] = popData[i][headInx[1]];
    }
    var aveAllX = roundToDig(mean(allXData),3);
    var sdAllX = roundToDig(sd(allXData),3);
    var aveAllY = roundToDig(mean(allYData),3);
    var avePopX = mean(popXList);
    var avePopY = mean(popYList);
    var sdPopX = sd(popXList);
    var sdPopY = sd(popYList);
    var popR = corr(popXList,popYList);
    var fac1 = Math.round(7*rand.next()-3.5);
    var fac2 = Math.round(7*rand.next()-3.5);
    var n = 5;
    var XPredPop = avePopX + fac2*sdPopX*popR;
    var YPredPop = avePopY + fac1*sdPopY*popR;
    var YpredPop2 = avePopY + fac2*sdPopY;
    var popXMnMx = vMinMax(popXList);
    var popYMnMx = vMinMax(popYList);
    var lists = [popXList,popYList];
// -->
</script>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    var qStr = 'Here is a table of bivariate data, 1990 U.S. Census estimates of the ' +
               explain[headInx[0]] + ', abbreviated by ' + header[0] + ', and ' +
               explain[headInx[1]] + ', abbreviated by ' + header[1] +
               ', in a simple random sample of size ' + nStat.toString() +
               ' from the 50 states and the District of Columbia. ' +
               'The next several questions refer to these data:</p>';
    document.writeln(qStr);
    listToTable(header,lists,"standard","center",true,"-1");
// -->
</script>
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var qStr = '<span class="qSpan">The lower quartile (in 1000s of people) of ' +
               header[0] + ' for these ' + nStat.toString() + ' states is closest to</span></p><p>';
    document.writeln(qStr);
    var lqi = Math.ceil(0.25*nStat) - 1;
    var rawOpt = [
                    (roundToDig(popXList[lqi-1],3)).toString(),
                    (roundToDig((popXList[lqi-1] + popXList[lqi])/2,3)).toString(),
                    (roundToDig(sortPopXList[lqi-1],3)).toString(),
                    (roundToDig(sortPopXList[lqi],3)).toString(),
                    (roundToDig((sortPopXList[lqi-1] + sortPopXList[lqi])/2,3)).toString()
                 ];
    var optPerm = randPermutation(rawOpt,'inverse');
    var opt = optPerm[0];
    var aVal = alphabet[optPerm[1][3]];
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var theInts = listOfRandInts(2,1,9);
    var thePctile = 10*theInts[0]+theInts[1];
    frac = thePctile*nStat/100;
    pctili = Math.ceil(frac)-1;
    pctToNext = frac - pctili;
    var qStr = '<span class="qSpan">The ' + ordinals[thePctile] + ' percentile of the ' +
               nStat.toString() + ' values of ' + header[0] + ' is closest to </span></p><p>';
    document.writeln(qStr);
    var rawOpt = [
                   (roundToDig(sortPopXList[pctili],3)).toString(),
                   (roundToDig(popXList[pctili],3)).toString(),
                   (roundToDig(sortPopXList[pctili-1] +
                       pctToNext*(sortPopXList[pctili]-sortPopXList[pctili-1]),3)).toString(),
                   (roundToDig(sortPopXList[pctili] +
                       pctToNext*(sortPopXList[pctili+1]-sortPopXList[pctili]),3)).toString(),
                   (roundToDig(popXList[pctili-1] +
                       pctToNext*(popXList[pctili]-popXList[pctili-1]),3)).toString(),
         ];
    var optPerm = randPermutation(rawOpt,'inverse');
    var opt = optPerm[0];
    var aVal = alphabet[optPerm[1][0]];
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var qStr = '<span class="qSpan">The median of these ' + nStat.toString() + ' values of ' +
               header[0] + ' is closest to </span></p><p>';
    document.writeln(qStr);
    var medi = Math.ceil(0.5*nStat)-1;
    var rawOpt = [(roundToDig(popXList[medi],3)).toString(),
                  (roundToDig((popXList[medi] + popXList[medi-1])/2,3)).toString(),
                  (roundToDig(sortPopXList[medi],3)).toString(),
                  (roundToDig(sortPopXList[medi-1],3)).toString(),
                  (roundToDig((sortPopXList[medi] + sortPopXList[medi-1])/2,3)).toString()
                 ];
    var optPerm = randPermutation(rawOpt,'inverse');
    var opt = optPerm[0];
    var aVal = alphabet[optPerm[1][2]];
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var qStr = '<span class="qSpan">The IQR of these ' + nStat.toString() + ' values of ' + header[0] +
               ' is closest to </span></p><p>';
    document.writeln(qStr);
    var uqi = Math.ceil(0.75*nStat) - 1;
    var lqi = Math.ceil(0.25*nStat) - 1;
    var uno = roundToDig((sortPopXList[uqi] - sortPopXList[lqi]),3);
    var dos = roundToDig((popXList[uqi] - popXList[lqi]),3);
    var tres = roundToDig(sortPopXList[lqi],3) + " to " + roundToDig(sortPopXList[uqi],3);
    var quatro =roundToDig(sortPopXList[lqi-1],3) + " to " + roundToDig(sortPopXList[uqi+1],3);
    var cinco = roundToDig((sortPopXList[uqi] - sortPopXList[lqi-1]),3);
    var rawOpt = [uno.toString(),dos.toString(),
        tres.toString(),quatro.toString(),
        cinco.toString()];
    var optPerm = randPermutation(rawOpt,'inverse');
    var opt = optPerm[0];
    var aVal = alphabet[optPerm[1][0]];
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var nBins = 5;
    var pct = 0;
    while(pct == 0) {
        var theInt = (listOfDistinctRandInts(2,1,nBins-1)).sort(numberLessThan);
        var loLim = roundToDig(popXMnMx[0]*0.9,0);
        var hiLim =  roundToDig(popXMnMx[1]*1.1,0);
        var dLim = (hiLim - loLim)/(nBins-1);
        var limits = [roundToDig(loLim + theInt[0]*dLim,0),
                      roundToDig(loLim + theInt[1]*dLim,0)
                     ];
        var count = 0;
        for (i=0; i < nStat; i++) {
            if (limits[0] < popXList[i] && popXList[i] <= limits[1]) {
                count++;
            }
        }
        pct = count*100/nStat;
    }
    var qStr = '<span class="qSpan">In a relative frequency table for the ' + nStat.toString() +
               ' values of ' + header[0] + ', the entry for the class interval ' +
               (limits[0]).toString() + ' (exclusive) to ' + (limits[1]).toString() +
               ' (inclusive) is closest to</span></p><p>';
    document.writeln(qStr);
    var rs = listOfRandSigns(2);
    var oneAns = pct + rs[1]*10;
    var anotherAns = count+rs[0];
    if (oneAns <= 0) {oneAns = pct - rs[1]*10;}
    if (anotherAns <= 0) {anotherAns = count - rs[0];}
    var rawOpt = [count.toString(),
                 (roundToDig(anotherAns,1)).toString(),
                 (roundToDig(pct,1)).toString() + "%",
                 (roundToDig(oneAns,1)).toString() + "%",
                 (roundToDig(pct,1)).toString() + "% per person"
              ];
    var optPerm = randPermutation(rawOpt,'inverse');
    var opt = optPerm[0];
    var aVal = alphabet[optPerm[1][2]];
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var count = 0;
    for (i=0; i < nStat; i++) {
        if (limits[0] < popXList[i] && popXList[i] <= limits[1]) {
            count++;
        }
    }
    pct = count*100/nStat;
    var qStr = '<span class="qSpan">In a histogram for the ' + nStat.toString() + ' values of ' +
               header[0] + ', the height of the bin for the class interval ' +
               (limits[0]).toString() + ' (exclusive) to ' +
               (limits[1]).toString() + ' (inclusive) would be closest to</span></p><p>';
    document.writeln(qStr);
    var binHt = pct/(limits[1]-limits[0]);
    var bhStr = (roundToDig(binHt,4)).toString();
    var pctStr = (roundToDig(pct,4)).toString();
    var rawOpt = [
              pctStr + "% per person",
              bhStr + "% per person",
              pctStr + "%",
              pctStr + "% per 1000 people",
              bhStr + "% per 1000 people"
              ];
    var optPerm = randPermutation(rawOpt,'inverse');
    var opt = optPerm[0];
    var aVal = alphabet[optPerm[1][4]];
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var rAns = listOfDistinctRandInts(8,-5,5);
    rAns[8] = 0;
    rAns[9] = 0;
    var rPert = new Array(2);
    rPert[0] = new Array(5);
    rPert[1] = new Array(5);
    for (i=0; i < 5; i++) {
      rPert[0][i] = rAns[2*i];
      rPert[1][i] = rAns[2*i+1];
    }
    var perm = listOfDistinctRandInts(5,0,4);
    var opt = [ "(" + (roundToDig(avePopX + rPert[0][perm[0]],3)).toString() + ", " +
        (roundToDig(avePopY + rPert[1][perm[0]],3)).toString() + ")",
        "(" + (roundToDig(avePopX + rPert[0][perm[1]],3)).toString() + ", " +
        (roundToDig(avePopY + rPert[1][perm[1]],3)).toString() + ")",
        "(" + (roundToDig(avePopX + rPert[0][perm[2]],3)).toString() + ", " +
        (roundToDig(avePopY + rPert[1][perm[2]],3)).toString() + ")",
        "(" + (roundToDig(avePopX + rPert[0][perm[3]],3)).toString() + ", " +
        (roundToDig(avePopY + rPert[1][perm[3]],3)).toString() + ")",
        "(" + (roundToDig(avePopX + rPert[0][perm[4]],3)).toString() + ", " +
        (roundToDig(avePopY + rPert[1][perm[4]],3)).toString() + ")"];
    var aVal = '';
    for (i=0; i<n; i++){
        if (rPert[0][perm[i]] == 0 && rPert[1][perm[i]] == 0) {
            aVal = alphabet[i];
        }
    }
    var qStr = '<span class="qSpan">The point of averages of these data (for ' +
               header[0] + ' on the X axis and ' + header[1] + ' on the Y axis) ' +
               'is closest to</span></p><p>';
    document.writeln(qStr);
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var ssr = 0;
    for (i=0; i < popXList.length; i++) {
        ssr += (popXList[i] - avePopX)*(popXList[i] - avePopX);
    }
    ssr /= popXList.length;
    op = makeOptions(ssr,.01*ssr,1);
    opt = op[0];
    aVal = op[1];
    var qStr = '<span class="qSpan">The SD of the list of ' + nStat.toString() + ' values of ' +
               header[0] + ' is closest to the square root of</span></p><p>';
    document.writeln(qStr);
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>.
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    var rAns = listOfDistinctRandInts(5,1,10);
    var rs = listOfRandSigns(5);
    var indMx = 0;
    var popYMx = popYList[0];
    for (i=1; i < n; i++) {
    if ( popYMx < popYList[i] ) {
        popYMx = popYList[i];
        indMx = i;
    }
    }
    stdYVal = (popYList[indMx] - avePopY)/sdPopY;
    var op = makeOptions(stdYVal,.1*stdYVal,2);
    var opt = op[0];
    var aVal = op[1];
    var qStr = 'The SD of ' + header[1] + ' is ' + roundToDig(sdPopY,3).toString() +
               '. In the following table, &quot;SU&quot; stands for &quot;standard ' +
               'units.&quot;</p>';
    document.writeln(qStr);
    var qStr = '<div align="center"><center><table border="2"><tr>' +
               '<td align="center">' + header[0] + '</td><td align="center">' +
               header[0] + ' in SU</td><td align="center">' + header[1] +
               '</td><td align="center">' +
               header[1] + ' in SU</td><td align="center">' + header[0] +
               ' in SU )&times;(' + header[1] + ' in SU)</td></tr>';
    document.writeln(qStr);
    var ccPopXY = 0.0;
    for (i = 0; i < nStat; i++) {
        var popXStd =  roundToDig((popXList[i] - avePopX)/sdPopX,2);
        var popYStd = roundToDig((popYList[i] - avePopY)/sdPopY,2);
        document.writeln("<tr>");
        document.writeln("<td align=\"right\">" + popXList[i]  +"</td>");
        document.writeln("<td align=\"right\">" + popXStd  +"</td>");
        document.writeln("<td align=\"right\">" + popYList[i]  +"</td>");
        prodXYSu = roundToDig(popXStd*popYStd,4);
        ccPopXY += prodXYSu;
        if (i == indMx) { // row with the question
            document.write('<td align="center"><p align="center">' +
                '<span class="qSpan">Fill in this blank<br />for problem ' + pCtr + '</span></p></td>');
        } else {
            document.writeln("<td align=\"right\">" + popYStd +
                          "</td><td align=\"right\">" + prodXYSu + "</td>");
        }
        document.writeln("</tr>");
    }
    ccPopXY /= n;
    var qStr = '</table></center></div>';
    document.writeln(qStr);
// -->
</script>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var qStr = '<span class="qSpan">The missing value for ' + header[1] +
               ' in standard units is closest to</span></p><p>';
    document.writeln(qStr);
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var ans = linspace(-.8,.8,5);
    if ( (Math.abs(ccPopXY + 0.6) <= .05) ||
       (Math.abs(ccPopXY + 0.2) <= .05) ||
       (Math.abs(ccPopXY - 0.2) <= .05) ||
       (Math.abs(ccPopXY - 0.6) <= .05) ) {
       ans = linspace(-.9,.9,5);
    }
    var opt = new Array(ans.length);
    for (i=0; i < ans.length; i++) {
        opt[i] = (roundToDig(ans[i],2)).toString();
    }
    var mn = Math.abs(ccPopXY-ans[0]);
    var aVal = alphabet[0];
    var tr;
    for (i=1; i<5; i++){
        tr = Math.abs(ccPopXY-ans[i]);
        if (tr < mn){
            mn = tr;
            aVal = alphabet[i];
        }
    }
    var qStr = '<span class="qSpan">The correlation coefficient of ' +
               header[0] + ' and ' + header[1] + ' is closest to</span></p><p>';
    document.writeln(qStr);
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>
</div>




<!-- ==================================START PROBLEM==================================== -->
<div class="problem">
<p align="center">
   <strong>The next three problems refer to the same artificial data set.
   </strong>
</p>

<!-- ==================================START PROBLEM==================================== -->

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
// Fake weight and height data. Take mean weight = 150#; mean height = 66". Slope 1"/5# = .2.
// ratio of SDs 6"/40# = .15
//
    var slope = 0.2;
    var htRg0 = 20;
    var aveWt0 = 150;
    var aveHt0 = 67;
    var sdRat = 0.15
    var pVals = listOfDistinctRandInts(2,0,1);
    if (pVals[0] != 0) {
        slope = 0;
    }
    var parms = [["polynomial", aveHt0, slope, 20*Math.abs(pVals[0])],
                1 + 4*Math.max(pVals[1],0), 10];
    var examplePoints = 100;
    var data6 = fakeBivariateData(examplePoints,parms[0],parms[1],parms[2], 0, 80);
    var htMnMx = vMinMax(data6[1]);
    var loHt = aveHt0 - htRg0/2;
    var htRg = htMnMx[1] - htMnMx[0];
    for (i=0; i < data6[0].length; i++) {
        data6[0][i] += aveWt0 - 40;
        data6[1][i] = loHt + (data6[1][i] - htMnMx[0])*htRg0/htRg;
    }
    var cc = roundToDig(corr(data6[0],data6[1]),2);
    var aveWt = roundToDig(mean(data6[0]),1);
    var aveHt = roundToDig(mean(data6[1]),1);
    var sdWt =  roundToDig(sd(data6[0]),1);
    var sdHt =  roundToDig(sd(data6[1]),1);
    var rmsResid = Math.sqrt(1-cc*cc)*sdHt;
    var qStr = 'The scatterplot below shows artificial data for the heights and weights ' +
               'of 100 individuals. The square is the point of averages. The average ' +
               'weight is ' + aveWt.toString() + ' lbs. with an SD of ' + sdWt.toString() +
               ' lbs., and the average height is ' + aveHt.toString() +
               ' in. with an SD of ' + sdHt.toString() + ' in. The correlation between ' +
               'height and weight is ' + cc.toString() + '.</p>';
    document.writeln(qStr);
    var qStr = '<p align="center">' +
               '<applet code="Correlation.class" codebase="../../Java" ' +
               ' align="baseline" width="600" height="320" name="applet2" ' +
               'archive="PbsGui.zip">' +
               '<param name="addPoints" value="false">' +
               '<param name="graphAveButton" value="false">' +
               '<param name="sdButton" value="false">' +
               '<param name="sdLineButton" value="false">' +
               '<param name="title" value="Fake Height v. Weight Data">' +
               '<param name="regressButtons" value="false">' +
               '<param name="showR" value="false">' +
               '<param name="x" value="' + (data6[0]).join() + '">' +
               '<param name="y" value="' + (data6[1]).join() + '">' +
               'You need Java to see this</applet>';
    document.writeln(qStr);
    var appNum = (document.applets.length - 1).toString();
    sectionContext += 'document.applets[' + appNum + '].setVariables(\"' +
                      (data6[0]).join() + '\",\"' +
                      (data6[1]).join() + '\");\n' +
                      'document.applets[' + appNum + '].showPlot();\n';
// -->
</script>
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var wtFac = (listOfRandInts(1,-3,3))[0];
    if (wtFac == 0) {
        wtFac = 2;
    }
    var predWt = roundToDig(aveWt + wtFac*sdWt,1);
    var predHt = roundToDig(aveHt + wtFac*cc*sdHt,1);
    var pert = 0.05*predHt;
    var op = makeOptions(predHt,pert,1," in.");
    var opt = op[0];
    var aVal = op[1];
    var qStr = '<span class="qSpan">The regression line estimate of the height of an ' +
               'individual whose weight is ' + predWt.toString() +
               ' lbs. is closest to</span></p><p>';
    document.writeln(qStr);
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var qStr = '<span class="qSpan">The rms error of regression for regressing ' +
               'height against weight is closest to</span></p><p>';
    document.writeln(qStr);
    var coef = roundToDig(1-cc*cc,2);
    var smallDiff = Math.min(coef, 1-coef);
    if (smallDiff < 0.2) {
        smallDiff = 0.2;
    }
    var pert = 0.2*smallDiff;
    var rs = listOfRandSigns(4);
    var pertFac = listOfDistinctRandInts(4,1,5);
    var perts = new Array(4);
    for (var i=0; i < 4; i++) {
        perts[i] = roundToDig(coef+rs[i]*pertFac[i]*pert, 3);
        if (perts[i] < 0 || perts[i] > 1) {
            perts[i] = roundToDig(coef-rs[i]*pertFac[i]*pert, 3);
        }
    }
    var rawOpt = [
                   "(" + (roundToDig(coef,3)).toString() + ")<sup>&frac12;</sup>&times;" +
                       sdHt.toString() + " in.",
                   "(" + perts[0].toString() +
                       ")<sup>&frac12;</sup>&times;" + sdHt.toString() + " in.",
                   "(" + perts[1].toString() +
                       ")<sup>&frac12;</sup>&times;" + sdWt.toString() + " lbs.",
                   "(" + perts[2].toString() +
                       ")<sup>&frac12;</sup>&times;" + sdWt.toString() + " in.",
                   "(" + perts[3].toString() +
                       ")<sup>&frac12;</sup>&times;" + sdHt.toString() + " lbs."
                 ];
    var optPerm = randPermutation(rawOpt,'inverse');
    var opt = optPerm[0];
    var aVal = alphabet[optPerm[1][0]];
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>


<!-- ==================================START PROBLEM==================================== -->

<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var qStr = '<span class="qSpan">For this scatterplot, the regression line, together ' +
               'with the SDs of height and weight, summarize the data</span></p><p>';
    document.writeln(qStr);
    var opt = ["well",
                "poorly, because of outliers",
                "poorly, because of nonlinearity",
                "poorly, because of heteroscedasticity",
                "poorly, because the association is weak"
              ];
    var aVal = "";
    var none = true;
    if (pVals[0] != 0) {
        aVal += "c&";
        none = false;
    }
    if (pVals[1] > 0) {
        aVal += "d&";
        none = false;
    }
    if (none) {
        aVal += "a";
    }
    if (aVal.lastIndexOf('&') == aVal.length - 1) {
        aVal = aVal.substring(0, aVal.length - 1);
    }
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>
</div>



<!-- ==================================START PROBLEM==================================== -->
<div class="problem">
<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var randSign = rand.next();
      if (randSign > 0.5) {
          randSign = 1;
    } else {
        randSign = -1;
    }
    var parms = new Array(1);
    var examplePoints = 100;
    var pVals = listOfRandInts(5,-1,1);
    parms[0] = [["polynomial", 10*pVals[0], 5*pVals[1],
                    2*pVals[2], .3*pVals[3]], 1 + 5*Math.max(pVals[4],0),
                    1 + 4*Math.floor(rand.next()+0.5)];
    var data5 = fakeBivariateData(examplePoints,parms[0][0],parms[0][1],parms[0][2]);
    var yMean = mean(data5[1]);
    yMnMx = vMinMaxAbs(data5[1]);
      if (Math.abs(yMean) < 0.07*yMnMx[1] || pVals[0] == 0){
        for (i=0; i < data5[1].length; i++){
            data5[1][i] -= yMean;
        }
        yMean = 0.0;
    }
    var xyCorr = corr(data5[0],data5[1]);
    var opt = ["data show nonlinear association and homoscedasticity; " +
                      "regression computed correctly",
               "data show linear association and heteroscedasticity; " +
                      "regression computed correctly",
               "data show nonlinear association and heteroscedasticity; " +
                      "regression computed correctly",
               "regression is a good summary of the data",
               "none of the above"];
    var aVal = '';
    if ((Math.abs(yMean) > 0.01) || (Math.abs(xyCorr) > 0.05)) {
        aVal ='e';
    } else if ((pVals[2] != 0 || pVals[3] != 0) && pVals[4] == 0) {
        aVal ='a';
    } else if ((pVals[2] != 0 || pVals[3] != 0) && pVals[4] > 0) {
        aVal ='c';
    } else if (pVals[2] == 0 && pVals[3] == 0 && pVals[4] > 0) {
        aVal = 'b';
    } else {
        aVal = 'd';
    }
    var qStr = 'Below is a residual plot from a regression. The square is the point of ' +
               'averages of the residual plot. <span class="qSpan">What does the residual ' +
               'plot indicate about the the underlying data and the regression?</span></p><p>';
    document.writeln(qStr);
    writeRadioExercise(qCtr++,opt,aVal);
    document.writeln('</p><p align="center">' +
                     '<applet code="Correlation.class" codebase="../../Java" ' +
                     ' align="baseline" width="600" height="320" name="applet3" ' +
                     'archive="PbsGui.zip">' +
                     '<param name="addPoints" value="false">' +
                     '<param name="graphAveButton" value="false">' +
                     '<param name="sdButton" value="false">' +
                     '<param name="sdLineButton" value="false">' +
                     '<param name="title" value="Residual Plot">' +
                     '<param name="regressButtons" value="false">' +
                     '<param name="showR" value="false">' +
                     '<param name="x" value="' + (data5[0]).join() + '">' +
                     '<param name="y" value="' + (data5[1]).join() + '">' +
                     'You need Java to see this</applet>');
   var appNum = (document.applets.length - 1).toString();
   sectionContext += 'document.applets[' + appNum + '].setVariables("' +
                     (data5[0]).join() + '","' +
                     (data5[1]).join() + '");\n' +
                     'document.applets[' + appNum + '].showPlot();\n';
// -->
</script>
</p>
</div>


<!-- ==================================START PROBLEM==================================== -->
<div class="problem">
<p>
<script language="JavaScript1.8" type="text/javascript" ><!--
    document.writeln(startProblem(pCtr++));
    var theHands = [ [
                       'three pair',
                       'two each of three kinds of cards',
                       '{2 of hearts, 2 of clubs, 3 of hearts, 3 of diamonds, 7 of clubs, 7 of clovers}',
                       13*2*11*1000,
                       'There are <span class="math"><sub>13</sub>C<sub>3</sub> = 286</span> ways of ' +
                         'picking the three kinds.  For each of those, there are ' +
                         '<span class="math"><sub>5</sub>C<sub>2</sub> = 10</span> ways of picking the ' +
                         'suits of each pair.  By the fundamental rule of counting, there are thus ' +
                         '<span class="math">286&times;10&times;10&times;10 ' +
                         ' = 286,000</span> possible <em>three-pair</em> hands.'
                     ],
                     [
                       'tenement house',
                       'four of one kind and two of another kind',
                       '{2 of spades, 2 of hearts, 2 of diamonds, 2 of clubs, 4 of clovers, 4 of hearts}',
                       13*5*12*10,
                       'There are <span class="math"><sub>13</sub>C<sub>1</sub> = 13</span> ways to pick the ' +
                         'kind of which to have 4, and then ' +
                         '<span class="math"><sub>12</sub>C<sub>1</sub> = 12</span> ways to ' +
                         'pick the kind of which to have a pair.  There are ' +
                         '<span class="math"><sub>5</sub>C<sub>4</sub> = 5</span> ways to pick the suits of ' +
                         'the four and <span class="math"><sub>5</sub>C<sub>2</sub> = 10</span> ways to pick ' +
                         'the suits of the pair.  By the fundamental rule of counting, there are thus ' +
                         '<span class="math">13&times;12&times;5&times;10 = ' + commify(13*12*5*10) +
                         '</span> possible <em>tenement house</em> hands.'
                     ],
                     [
                       'house with a vacancy',
                       'three of one kind, two of another kind, and a sixth card of a third kind',
                       '{2 of spades, 2 of hearts, 2 of diamonds, 4 of clovers, 4 of hearts, King of spades}',
                       13*10*12*10*11*5,
                       'There are <span class="math"><sub>13</sub>C<sub>1</sub> = 13</span> ways to pick the ' +
                         'kind of which to have 3, and then ' +
                         '<span class="math"><sub>12</sub>C<sub>1</sub> = 12</span> ways to ' +
                         'pick the kind of which to have a pair, and then ' +
                         '<span class="math"><sub>11</sub>C<sub>1</sub> = 11</span> ways to pick the kind of the ' +
                         'sixth card.  There are <span class="math"><sub>5</sub>C<sub>3</sub> = 10</span> ways ' +
                         'to pick the suits of the three, ' +
                         '<span class="math"><sub>5</sub>C<sub>2</sub> = 10</span> ways to pick ' +
                         'the suits of the pair, and <span class="math"><sub>5</sub>C<sub>1</sub> = 5</span> ' +
                         'ways to pick the suit of the sixth card.  By the fundamental rule of counting, there are ' +
                         'thus <span class="math">13&times;12&times;11&times;10&times;10&times;5 = ' +
                          commify(13*12*11*10*10*5) + '</span> possible <em>house with a vacancy</em> hands.'
                     ],
                     [
                       'house in the suburbs',
                       'three each of two kinds of cards',
                       '{2 of spades, 2 of hearts, 2 of diamonds, 4 of clovers, 4 of hearts, 4 of spades}',
                       13*6*100,
                       'There are <span class="math"><sub>13</sub>C<sub>2</sub> = 78</span> ways to pick the ' +
                         'two kinds. For each kind, there are ' +
                         '<span class="math"><sub>5</sub>C<sub>3</sub> = 10</span> ways to ' +
                         'pick the suits of the three cards of that kind. By the fundamental rule of ' +
                         'counting, there are thus ' +
                         '<span class="math">78&times;10&times;10= 780</span> ' +
                         'possible <em>house in the suburbs</em> hands.'
                     ],
                     [
                       'well-suited',
                       'at least one card of every suit, no more than one card of any kind (no pairs, etc.), ' +
                          'and not all cards of consecutive kinds',
                       '{2 of spades, 4 of hearts, 5 of diamonds, 8 of clubs, 10 of clubs, Jack of clovers}',
                         (binomialCoef(13,6)-9)*6*factorial(6)/2,
                       'There are <span class="math"><sub>13</sub>C<sub>6</sub> = 1716</span> ways of picking ' +
                         'six of the 13 kinds of cards, to avoid having a pair or more of any kind.  Of those, ' +
                         '9 are straights ({A, 2, 3, 4, 5, 6}, {2, 3, 4, 5, 6, 7}, &hellip; {9, 10, J, Q, K, A}) ' +
                         'so we need to subtract 9 to avoid counting straights.  We need one card to be from each ' +
                         'suit, and since there are 6 cards in all, one suit will occur twice.  There are 6 ways ' +
                         'to pick the suit that occurs twice.  For each of those possibilities, there are ' +
                         '<span class="math"><sub>6</sub>C<sub>2</sub> = 15</span> ways of picking the two cards ' +
                         'that have the same suit, and then <span class="math">4! = 24</span> ways of picking which ' +
                         'of the remaining 4 cards is assigned which of the remaining 4 suits.  By the ' +
                         'fundamental rule of counting, there are thus ' +
                         '<span class="math">(1716&minus;9)&times;6&times;15&times;24 = 3,687,120</span> ' +
                         'possible <em>well-suited</em> hands.'
                     ]
                    ];
    var which = listOfRandInts(1, 0, theHands.length-1)[0];
    var qStr = 'A peculiar deck of playing cards is like a regular deck, but has five suits: spades, ' +
               'hearts, diamonds, clubs, and clovers.  There are 13 cards in each suit: Ace, 2, 3, ' +
               '&hellip;, 10, Jack, Queen, King.  There are thus 5&times;13 = 65 cards in this deck. ' +
               'Consider dealing a 6-card hand from this deck.</p> ' +
               '<p> A <em>' + theHands[which][0] +
               '</em> hand is one that contains ' + theHands[which][1] + '.  An example of a <em>' +
               theHands[which][0] + '</em> hand is ' + theHands[which][2] +
               '.</p><p><span class="qSpan">How many different 6-card hands can be dealt from this deck that are ' +
               '<em>' + theHands[which][0] + '</em>?</span></p><p>Pick the closest answer.</p><p>';
    document.writeln(qStr);
    var rawOpt = makeRangeOptions(theHands[which][3], Math.floor(theHands[which][3]/10), 2*theHands[which][3],
                                  0, 3*theHands[which][3], 0, '', 100);
    var opt = rawOpt[0];
    var aVal = rawOpt[1];
    writeRadioExercise(qCtr++,opt,aVal);
// -->
</script>
</p>
</div>

<script language="JavaScript1.8" type="text/javascript" > <!--
    var qStr = '<p>';
    for (var i=0; i< pCtr-1; i++) {
        qStr += (i+1).toString() + ': ' + crypt(key[i],randSeed.toString()) + '<br />  ';
    }
    qStr += '</p>';
//   document.writeln(qStr);
// -->
</script>

</form>


<script language="JavaScript1.8" type="text/javascript" ><!--
    writeMiscFooter(true);
// -->
</script>
</body>
</html>
